// Utilizar os operadores $pop, $pull e $push;
// O operador $push adiciona um valor a um array . Se o campo não existir no documento, um novo array com o valor em um elemento será adicionado.
/* Ex: */ { $push: { <campo1>: <valor1>, ... } }

// Em conjunto com o $push , você pode utilizar o que chamamos de modificadores . Cada um desses modificadores tem funções específicas que você verá melhor com exemplos. São eles:
// Exemplo de adição usando $push
use sales;
db.supplies.updateOne(
  { _id: 1 },
  {
 $push: {
      items: {
        "name": "notepad",
        "price":  35.29,
        "quantity": 2,
      },
    },
  },
  { upsert: true },
);

// Resultado:
{
    _id : 1,
    items : [
        {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
        },
    ],
}

// $each : Adiciona múltiplos valores a um array
db.supplies.updateOne(
  {},
  {
push: {
      items: {
each: [
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
        ],
      },
    },
  },
  { upsert: true },
);

// Resultado:
{
    _id : 1,
    items : [
        {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
        },
        {
            "name" : "pens",
            "price" : 56.12,
            "quantity" : 5,
        },
        {
            "name" : "envelopes",
            "price" : 19.95,
            "quantity" : 8,
        },
    ],
}

// Utilizando múltiplos operadores:
// Considerando o DB a seguir:
db.supplies.updateOne(
  { _id: 1 },
  {
push: {
      items: {
each: [
          {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
        ],
sort: { quantity: -1 },
slice: 2,
      },
    },
  },
  { upsert: true },
);

// A operação acima utiliza os seguintes modificadores:
// O modificador $each para adicionar múltiplos documentos ao array items ;
// O modificador $sort para ordenar todos os elementos alterados no array items pelo campo quantity em ordem decrescente;
// E o modificador $slice para manter apenas os dois primeiros elementos ordenados no array items.



// $slice : Limita o número de elementos do array. Requer o uso do modificador $each
// $sort : Ordena os elementos do array . Requer o uso do modificador $each
// Exemplo com sort e slice:
db.supplies.updateOne(
  { _id: 1 },
  {
    $push: {
      items: {
        $each: [
          {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
        ],
        $sort: { quantity: -1 },
        $slice: 2,
      },
    },
  },
  { upsert: true },
);

// $position : Especifica a posição do elemento que está sendo inserido no array . Também requer o modificador $each. Sem o modificador $position , o operador $push adiciona o elemento no final do array.

// Operador $pop:
// Uma maneira simples de remover o primeiro ou o último elemento de um array é utilizar o operador $pop . Passando o valor -1 ao operador $pop você removerá o primeiro elemento. Já ao passar o valor 1 , você removerá o último elemento do array . Simples, não é?!
/** Exemplo de uso */
// Removendo o primeiro:
db.supplies.updateOne({ _id: 1 }, { $pop: { items: -1 } });
// Removendo o último:
db.supplies.updateOne({ _id: 1 }, { $pop: { items: 1 } });

// O operador $pull remove de um array existente todos os elementos com um ou mais valores que atendam à condição especificada.

// Digamos que você queira remover do array items os elementos pens e envelopes:

db.supplies.updateMany(
  {},
  {
    $pull: {
      items: {
        name: { $in: ["pens", "envelopes"] },
      },
    },
  },
);

// Removendo todos os itens que atendem a uma condição diretamente no $pull:
{ _id: 1, votes: [3, 5, 6, 7, 7, 8] }
db.profiles.updateOne(
  { _id: 1 },
  {
pull: {
      votes: { $gte: 6 },
    },
  },
);

// Removendo itens de um array:
{
  _id: 1,
  results: [
    { item: "A", score: 5 },
    { item: "B", score: 8, comment: "Strongly agree" },
  ],
},
{
  _id: 2,
  results: [
    { item: "C", score: 8, comment: "Strongly agree" },
    { item: "B", score: 4 },
  ],
}

// Comando:
// Com a operação abaixo, você consegue remover do array results todos os elementos que contenham o campo score igual a 8 e o campo item igual a "B" . Ou seja, o documento deve atender a ambas as condições.
db.survey.updateMany(
  {},
  {
pull: {
      results: { score: 8 , item: "B" },
    },
  },
);

// Resultado:
{
  _id: 1,
  results: [ { "item": "A", "score": 5 } ],
},
{
  _id: 2,
  results: [
    { "item": "C", "score": 8, "comment": "Strongly agree" },
    { "item": "B", "score": 4 },
  ],
}

// Utilizar o operador $addToSet;
// Se você utilizá-lo em um campo que não existe no documento alterado, ele criará um campo do tipo array com o valor especificado na operação;

// Se você utilizá-lo em um campo já existente no documento, mas esse campo não for um array , a operação não funcionará;

// Se o valor passado for um documento, o MongoDB o considerará como duplicado se um documento existente no array for exatamente igual ao documento a ser adicionado, ou seja, possui os mesmos campos com os mesmos valores, e esses campos estão na mesma ordem.

// Considerando o dado abaixo:
{
  _id: 1,
  item: "polarizing_filter",
  tags: ["electronics", "camera"],
}

// Comando que adiciona "accessories" ao array, desde que ele não exista.
db.inventory.updateOne(
  { _id: 1 },
  { $addToSet: { tags: "accessories" } },
);

// Resultado:
{
  _id: 1,
  item: "polarizing_filter",
  tags: [
    "electronics",
    "camera",
    "accessories",
  ],
}

// Adicionando vários itens ao array usando $each:
// Considerando o seguinte dado:
{ _id: 2, item: "cable", tags: ["electronics", "supplies"] }

// A operação abaixo utiliza o operador $addToSet e o modificador $each para adicionar alguns elementos a mais no array tags :
db.inventory.updateOne(
  { _id: 2 },
  {
    $addToSet: {
      tags: {
        $each: ["camera", "electronics", "accessories"],
      },
    },
  },
);+

// Resultado:
{
  _id: 2,
  item: "cable",
  tags: ["electronics", "supplies", "camera", "accessories"],
}


// Alterando itens sem saber o index de um elemento do array.
// Exercício 9 e 11 do dia 24.2 ensinam como usar esse operador.