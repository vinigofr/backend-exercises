use ('erp');
db.produtos.find().limit(5);
db.clientes.find().limit(5);
db.vendas.find().limit(5);
  // Exercício 1: Utilizando o estágio $match, escreva uma agregação para retornar somente os clientes do sexo "MASCULINO".
  use ('erp');
  db.clientes.aggregate(
    [
      {
        $match: {
          sexo: "MASCULINO"
        }
      },
      {
        $project: { nome: 1, _id: 0, sexo: 1 }
      }
    ]
  );

  // Exercício 2: Utilizando o estágio $match, escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005.
  // Referência: https://stackoverflow.com/questions/31071999/date-comparison-in-mongodb/48615758

  use ('erp');
  db.clientes.aggregate(
    [
      {
        $match: {
          sexo: "FEMININO",
          dataNascimento: {
            $lte: new Date('2005-12-31'), $gte: new Date('1995-01-01'),
          }
        }
      }
    ]
  );

  // Exercício 3: Utilizando o estágio $match, escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005, limitando a quantidade de documentos retornados em 5.
  use ('erp');
  db.clientes.aggregate(
    [
      {
        $match: {
          sexo: "FEMININO",
          dataNascimento: {
            $lte: new Date('2005-12-31'), $gte: new Date('1995-01-01'),
          }
        }
      }, 
      {
        $limit: 5
      }
    ]
  );

  // Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.

  use ('erp');
  db.clientes.aggregate(
    [
      { $match: { "endereco.uf": "SC" } },
      {
        $group: {
          _id: "$endereco.uf",
          qty: { $sum: 1 }
        }
      }
    ]
  );

  // Exercício 5: Agrupe os clientes por sexo. Retorne o total de clientes de cada sexo no campo total.
  use ('erp');
  db.clientes.aggregate( [{ $group: { _id: "$sexo", qty: { $sum: 1 } } }]);

  // Exercício 6: Agrupe os clientes por sexo e uf. Retorne o total de clientes de cada sexo no campo total.
  use ('erp');
  db.clientes.aggregate(
    [
      {
        $group: {
          _id: {
            sexo: "$sexo",
            UF: "$endereco.uf"
          },
          total: { $sum: 1 }
        }
      }
    ]
  );

  // Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):
  {
  "estado": "SP",
  "sexo": "MASCULINO",
  "total": 100
  }
  use ('erp');
  db.clientes.aggregate(
    [
      {
        $group: {
          _id: {
            sexo: "$sexo",
            UF: "$endereco.uf"
          },
          total: { $sum: 1 }
        }
      },
      {
        $project: {
          _id: 0,
          estado: "$_id.UF",
          sexo: "$_id.sexo",
          total: 1,
        }
      }
    ]
  );

  // Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.
  use ('erp');
  db.vendas.aggregate(
    [
      {
        $lookup: {
          from: "clientes",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "clientes_field"
        }
      },
      {
        $sort: {
          valorTotal: -1,
        }
      },
      { $limit: 5 },
      {
        $project: {
          _id: 0,
          Nome: "$clientes_field.nome",
          Total_gasto: "$valorTotal"
        }
      }
    ]
  );

  // Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019.

  use ('erp');
  db.vendas.aggregate(
    [ {
        $match: {
          dataVenda: {
              $lte: new Date('2019-12-31'),
              $gte: new Date('2019-01-01')

          }
        }
      },
      {
        $lookup: {
          from: "clientes",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "clientes_field"
        }
      },
      {
        $sort: {
          valorTotal: -1,
        }
      },
      { $limit: 10 },
      {
        $project: {
          _id: 0,
          Nome: "$clientes_field.nome",
          Total_gasto: "$valorTotal",
          "Ano de referência": "2019"
        }
      }
    ]
  );

  // Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.
// Dica: O operador $count pode simplificar sua query.
  use ('erp');
  db.vendas.aggregate(
    [
      {
        $group: {
          _id: "$clienteId",
          vezesCompra: { $sum: 1 }
        }
      },
      {
        $match: {
          vezesCompra: { $gt: 5 }
        }
      },
      {
        $count: "quantidade"
      }
    ]
  );

  // Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020.
  use ('erp');
  db.vendas.aggregate(
    [
      {
        $match: {
          dataVenda: {
            $lte: new Date('2020-03-31'),
            $gte: new Date('2020-01-01')
          }
        }
      },
      {
        $group: {
          _id: "$clienteId",
          vezesCompra: { $sum: 1 }
        }
      },
      {
        $match: {
          vezesCompra: { $lt: 3 }
        }
      },
      {
        $count: "quantidade"
      }
    ]
  );

  // Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020. Retorne os documentos no seguinte formato:
  use ('erp');
  db.vendas.aggregate(
    [ {
        $match: {
          dataVenda: {
            $lte: new Date('2020-12-31'),
            $gte: new Date('2020-01-01')
          }
        }
      },
      {
        $lookup: {
          from: "clientes",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "clientes_field"
        }
      },
      {
        $unwind: "$clientes_field"
      },
      {
        $group: {
          _id: {
            UF: "$clientes_field.endereco.uf"
          },
          totalVendas: { $sum: 1 }
        }
      },
      {
        $sort: { totalVendas: -1 }
      },
      { $limit: 3 },
      {
        $project: {
          _id: 0,
         uf: "$_id.UF",
         totalVendas: 1 
        }
      }
    ]
  );

{
  "totalVendas": 10,
  "uf": "SP"
}
  // Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019. Ordene os resultados pelo nome da uf. Retorne os documentos no seguinte formato:
  use ('erp');
  db.vendas.aggregate(
    [ {
        $match: {
          dataVenda: {
            $lte: new Date('2019-12-31'),
            $gte: new Date('2019-01-01')
          }
        }
      },
      {
        $lookup: {
          from: "clientes",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "clientes_field"
        }
      },
      {
        $unwind: "$clientes_field"
      },
      {
        $group: {
          _id: {
            UF: "$clientes_field.endereco.uf"
          },
          totalVendas: { $sum: 1 },
          mediaVendas: { $avg: "$valorTotal" }
        }
      },
      {
        $sort: { UF: 1 }
      },
      { $limit: 3 },
      {
        $project: {
          _id: 0,
         uf: "$_id.UF",
         totalVendas: 1,
         mediaVendas: 1,
        }
      }
    ]
  );

{
  "_id": "MG",
  "mediaVendas": 9407.129225352113,
  "totalVendas": 142
}
